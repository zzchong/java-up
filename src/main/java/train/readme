注:本程序在JDK8环境下测试运行

运行:app.java文件即可


代码说明:
    整体结构分以下三部分:
       （1）Route ：相邻两城之间的线路（有向）。Route 定义了三个属性，即startTown（开始城镇点），endTown（结束城镇点），edge（两城之间的距离），此对象表示的整个线路图上的最小单位。
       （2）Routes ：表示任意两城之间的线路。Routes 中定义的routes属性，表示此两城之间所有的线路集合。Routes中还预设了一些常用的方法，比如size()（两城之间所有线路的数量），getRoutesByStop（）（根据停站点查询线路），getNumByLength（）（根据距离查询线路）等。
       （3）Graph ：表示整个线路图。Graph中定义了有初始化线路的方法getRoutes（），根据线路查询距离的方法getDistance（）等
       另外：任意两点之间的线路如果查过一次后，再次查询时先从内存cache中去取，不用每次都计算查询，提高运行效率。

        查找任意两城所有线路的思路getRoutes（）:
                比如查A B之间的所有线路
               1 先查出 到B城的所有的相邻的前节点城市，
               2 判断查出的这些城市中是否有A城市，如果有将其存入线路（LinkList）中，并将其加入到存所有线路的集合（returnList）中
               3 因为有可能是双向的，比如 A->B->A-B ,所以还需将此线路存入到待处理的线路（tempList）中。

               4 接着执行getPreviousRoutes()方法
               5 此方法第一个参数是 待处理的线路(tempList)，第二个参数 已查询完成的线路

               6 接下来遍历tempList，然后查取每个线路的所有相邻的前节点城市，然后重复执行（2）（3）操作
               7 再次得到 待处理的线路（copyTempList） 和 已完成的线路（returnList）
               8 然后不断的重复（4）（5）（6）（7）就会查出所有的线路

               因为两点之间可能是双向的，即存在闭环 ，也就是说查找线路这个过程可能会一直重复下去，这显然是不行的，
               所以预设了两个中断条件。即最多查多少条线路（maxnumRoutes），默认是100，最多有多少停站点（maxnumStop），默认是20，可以自行设置,当然在设置前先执行一下clearCache(),以防线路直接从缓存里取。


